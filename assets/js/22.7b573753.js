(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{350:function(a,n,l){"use strict";l.r(n);var e=l(4),t=Object(e.a)({},(function(){var a=this,n=a._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("h3",{attrs:{id:"call-apply-bind"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#call-apply-bind"}},[a._v("#")]),a._v(" call,apply,bind")]),a._v(" "),n("p",[a._v("在JavaScript中，call、apply和bind是Function对象自带的三个方法，都是为了改变函数体内部 this 的指向。")]),a._v(" "),n("p",[a._v("apply 、 call 、bind 三者第一个参数都是 this 要指向的对象，也就是想指定的上下文；")]),a._v(" "),n("p",[a._v("apply 、 call 、bind 三者都可以利用后续参数传参；")]),a._v(" "),n("blockquote",[n("p",[a._v("bind 是返回对应 函数，便于稍后调用；apply 、call 则是立即调用 。")])]),a._v(" "),n("h4",{attrs:{id:"_1-列子"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-列子"}},[a._v("#")]),a._v(" 1.列子：")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("function sayHello() {}\n\nsayHello.prototype = {\n    name: 'jack',\n    say: function () {\n        console.log('Hello ' + this.name);\n    }\n}\n\nvar people = new sayHello(); // 此时方法里面的this指的是sayHello\npeople.say(); // Hello jack\n")])])]),n("blockquote",[n("p",[a._v("但是如果我们有一个对象 child= {name : 'lucy'} ,我们不想重新定义 say 方法，那么我们可以通过 call 或 apply 用 apple 的 say 方法：")])]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("child = {\n    name : 'lucy'\n}\npeople.say.call(child); //此时的this的指向已经同过call（）方法改变了，指向的是child，this.name就是child.name='lucy';\n//结果是Hello lucy \n\npeople.say.apply(child);//同理，此时的this的指向已经同过apply（）方法改变了，指向的是child，this.name就是child.name ='lucy';\n//Hello lucy\n\n// 如果传入的是 null：\npeople.say.apply(null); // null是window下的，此时，this 就指向了window ，但是window下并没有name这个属性，因此this.name就是window.name=undefined;\n//Hello undefined\n")])])]),n("h4",{attrs:{id:"_2-对于-apply、call-二者而言-作用完全一样-只是接受-参数-的方式不太一样。call-是把参数按顺序传递进去-而-apply-则是把参数放在数组-里。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-对于-apply、call-二者而言-作用完全一样-只是接受-参数-的方式不太一样。call-是把参数按顺序传递进去-而-apply-则是把参数放在数组-里。"}},[a._v("#")]),a._v(" 2.对于 apply、call 二者而言，作用完全一样，只是接受 参数 的方式不太一样。call 是把参数按顺序传递进去，而 apply 则是把参数放在数组 里。")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("var array1 = [12,'foo',{name:'Joe'},-2458];\nvar array2 = ['Doe' , 555 , 100];\n\nArray.prototype.push.call(array1, array2);\n// 这里用 call 第二个参数不会把 array2 当成一个数组,而是一个元素\n\n//等价于array1.push(‘‘'Doe' , 555 , 100’’);\n//array1.length=5;\n\nArray.prototype.push.apply(array1, array2); // 这里用 apply 第二个参数是一个数组\n\n// 等价于:  array1.push('Doe' , 555 , 100);\n//array1.length=7;\n")])])]),n("h4",{attrs:{id:"_3-类-伪-数组使用数组方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-类-伪-数组使用数组方法"}},[a._v("#")]),a._v(" 3.类（伪）数组使用数组方法")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("var divElements = document.getElementsByTagName('div'); //虽然 divElements 有length属性，\n但是他是一个伪数组，不能使用数组里面的方法\n\nArray.isArray(divElements);// false\n\nvar domNodes = Array.prototype.slice.call(document.getElementsByTagName('div'));\n// 将数组对象Array里的this指向伪数组document.getElementsByTagName('div')， \n//slice() 方法可从已有的数组中返回选定的元素，不传参数是，返回整个数组 \n\nArray.isArray(domNodes);// true\n")])])]),n("h4",{attrs:{id:"_4-验证一个对象的类型可以用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-验证一个对象的类型可以用"}},[a._v("#")]),a._v(" 4. 验证一个对象的类型可以用：")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("Object.prototype.toString.call(obj) \n")])])]),n("h4",{attrs:{id:"_5-bind-方法-mdn-的解释是-bind-方法会创建一个-新函数-称为绑定函数-当调用这个绑定函数时-绑定函数会以创建它时传入-bind-方法的第一个参数-作为-this-传入-bind-方法的-第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-bind-方法-mdn-的解释是-bind-方法会创建一个-新函数-称为绑定函数-当调用这个绑定函数时-绑定函数会以创建它时传入-bind-方法的第一个参数-作为-this-传入-bind-方法的-第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数。"}},[a._v("#")]),a._v(" 5.bind() 方法,MDN 的解释是：bind() 方法会创建一个 新函数，称为绑定函数，当调用这个绑定函数时，绑定函数会以创建它时传入 bind() 方法的第一个参数 作为 this，传入 bind() 方法的 第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数。")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("var bar = function(){\n    console.log(this.x);\n}\nvar foo = {\n    x:3\n}\n\nbar(); // undefined\nvar func = bar.bind(foo); //此时this已经指向了foo，但是用bind（）方法并不会立即执行，而是创建一个新函数，如果要直接调用的话 可以 bar.bind(foo)（）\n\n\nfunc(); // 3\n")])])]),n("h4",{attrs:{id:"_6-在-javascript-中-多次-bind-是无效的。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-在-javascript-中-多次-bind-是无效的。"}},[a._v("#")]),a._v(" 6.在 Javascript 中，多次 bind() 是无效的。")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("var fun1 = function(){\n    console.log(this.x);\n}\nvar fun2 = {\n    x:3\n}\nvar fun3 = {\n    x:4\n}\nvar func = fun1.bind(fun2).bind(fun3);\nfunc(); //3\n\nvar fun4 = {\n    x:5\n}\n\nvar func = fun1.bind(fun2).bind(fun3).bind(fun4);\nfunc(); //3\n")])])]),n("h4",{attrs:{id:"_7-apply、call、bind-三者相比较-之间又有什么异同呢-何时使用-apply、call-何时使用-bind-呢。简单的一个例子"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-apply、call、bind-三者相比较-之间又有什么异同呢-何时使用-apply、call-何时使用-bind-呢。简单的一个例子"}},[a._v("#")]),a._v(" 7.apply、call、bind 三者相比较，之间又有什么异同呢？何时使用 apply、call，何时使用 bind 呢。简单的一个例子：")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("var obj = {\n    name: ‘marry’,\n};\n\nvar foo = {\n    getNmae: function() {\n        return this.name;\n    }\n}\nconsole.log(foo.getNmae.bind(obj)());  //marry\nconsole.log(foo.getNmae.call(obj));    //marry\nconsole.log(foo.getNmae.apply(obj));   //marry\n")])])]),n("blockquote",[n("p",[a._v("bind只是返回对应的函数，还需要调用才行")])])])}),[],!1,null,null,null);n.default=t.exports}}]);